var MAGIC = "Simpleboot";

var MB_MAGIC = 0x36d76289;

var MB_MOD_ALIGN = 0x00001000;
var MB_INFO_ALIGN = 0x00000008;

var MB_TAG_ALIGN = 8;
var MB_TAG_TYPE_END = 0;
var MB_TAG_TYPE_CMDLINE = 1;
var MB_TAG_TYPE_BOOTLDR_NAME = 2;
var MB_TAG_TYPE_MODULE = 3;
var MB_TAG_TYPE_MMAP = 6;
var MB_TAG_TYPE_FRAMEBUFFER = 8;
var MB_TAG_TYPE_EFI64 = 12;
var MB_TAG_TYPE_SMBIOS = 13;
var MB_TAG_TYPE_ACPI_OLD = 14;
var MB_TAG_TYPE_ACPI_NEW = 15;
var MB_TAG_TYPE_EFI64_IH = 20;


var MB_TAG_TYPE_EDID = 256;
var MB_TAG_TYPE_SMP = 256;

struct MultibootInfo {
    total_sz: uint32;
    reserved: uint32;
}

struct MultibootTag {
    type: uint32;
    sz: uint32;
}

struct MultibootCMDTag {
    type: uint32;
    sz: uint32;
    str: char[255];
}

struct MultibootLdrNameTag {
    type: uint32;
    sz: uint32;
    str: char[255];
}

struct MultibootModuleTag {
    type: uint32;
    sz: uint32;
    mod_start: uint32;
    mod_end: uint32;
    str: char[255];
}

var MB_MEM_USABLE = 0;
var MB_MEM_RESERVED  = 1;
var MB_MEM_UEFI = 2;
var MB_MEM_ACPI_RECLAIM = 3;
var MB_MEM_NVS = 4;
var MB_MEM_BADRAM = 5;

struct MemoryMapEntry {
    base_addr: uint64;
    len: uint64;
    type: uint32;
    reserved: uint32;
}

struct MultibootMemoryMapTag {
    type: uint32;
    sz: uint32;
    entry_sz: uint64;
    entry_version: uint64;
    mmap: MemoryMapEntry[4096];
}

struct MultibootFramebufferTag {
    type: uint32;
    sz: uint32;
    framebuffer_addr: uint64;
    framebuffer_pitch: uint32;
    framebuffer_width: uint32;
    framebuffer_height: uint32;
    framebuffer_bpp: uint8;
    framebuffer_type: uint8;
    reserved: uint16;
    framebuffer_red_field_position: uint8;
    framebuffer_red_mask_size: uint8;
    framebuffer_green_field_position: uint8;
    framebuffer_green_mask_size: uint8;
    framebuffer_blue_field_position: uint8;
    framebuffer_blue_mask_size: uint8;
}

struct MultibootEFI64Tag {
    type: uint32;
    sz: uint32;
    ptr: uint64;
}

struct MultibootSMBiosTag {
    type: uint32;
    sz: uint32;
    major: uint8;
    minor: uint8;
    reserved: uint8[6];
    tables: uint8[255];
}

struct MultibootACPIOldTag {
    type: uint32;
    sz: uint32;
    rsdp: uint8[255];
}

struct MultibootACPINewTag {
    type: uint32;
    sz: uint32;
    rsdp: uint8[255];
}

struct MultibootEFI64IHTag {
    type: uint32;
    sz: uint32;
    ptr: uint64;
}

struct MultibootEDIDTag {
    type: uint32;
    sz: uint32;
    edid: uint64[255];
}

struct MultibootSMPTag {
    type: uint32;
    sz: uint32;
    numcores: uint32;
    running: uint32;
    bspid: uint32;
}


